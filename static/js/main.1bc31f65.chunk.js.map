{"version":3,"sources":["Display.js","App.js","serviceWorker.js","index.js"],"names":["Display","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","click","bind","assertThisInitialized","toggleFav","item","string","e","document","createElement","innerHTML","childNodes","length","nodeValue","favorite","react_default","a","id","className","onClick","title","renderHTML","parse","body","Component","App","state","items","filteredItems","isLoaded","count","favs","Change","renderFavs","clear","_this2","Items","fetch","then","obj","json","OBJ","map","push","category","keywords","setState","catch","err","alert","i","query","filter","Keys","split","join","replace","includes","toLowerCase","undefined","_this3","favItems","style","color","index","Display_Display","_this4","index_min_default","placeholder","searchText","classNames","onChange","onEnter","onSearchClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1bc31f65.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport renderHTML from 'react-render-html';\r\n\r\nexport default class Display extends Component {\r\n  constructor(props){\r\n   super(props);\r\n   this.click=this.click.bind(this);\r\n\r\n }\r\n\r\n\r\n click(){\r\n   this.props.toggleFav(this.props.item);\r\n }\r\n\r\nparse(string){\r\n     var e = document.createElement('div');\r\n     e.innerHTML = string;\r\n     // handle case of empty input\r\n     return e.childNodes.length === 0 ? \"\" : e.childNodes[0].nodeValue;\r\n}\r\n\r\n  render() {\r\n    let item = this.props.item;\r\n    if(item.favorite) {\r\n    return (\r\n      <div id={item.id} className=\"display\">\r\n      {/*\r\n        source: https://fontawesome.com/icons/star?style=solid\r\n      */}\r\n      <div className= \"left\">\r\n        <button  id ={\"icon\"+item.id} onClick ={this.click} className=\"fa fa-star fav\">\r\n        </button>\r\n        <span className=\"title\">   {item.title} </span>\r\n      </div>\r\n        <div className= \"right\" >\r\n        {renderHTML(this.parse(item.body))}\r\n        </div>\r\n        </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div id={item.id} className=\"display\">\r\n      {/*\r\n        source: https://fontawesome.com/icons/star?style=solid\r\n      */}\r\n      <div className=\"left\">\r\n        <button  id ={\"icon\"+item.id} onClick ={this.click} className=\"fa fa-star notfav\">\r\n        </button>\r\n        <span className=\"title\">   {item.title} </span>\r\n      </div>\r\n        <div className= \"right\" >\r\n        {renderHTML(this.parse(item.body))}\r\n        </div>\r\n        </div>\r\n    );\r\n  }\r\n\r\n  }\r\n}\r\n","import React, { Component } from 'react';\nimport './App.css';\nimport SearchField from \"react-search-field\";\nimport Display from \"./Display\"\n\n\n\nclass App extends Component {\n      state ={\n        items : [], //Stores all the items\n        filteredItems: [], //Stores the search result items\n        isLoaded : false,  //Variable to check if data is fetched or not\n        count : 0, //kepp track of items\n        favs : 0 //keep count of favorites\n      }\n\n      constructor(props){\n       super(props);\n       this.Change=this.Change.bind(this);\n       this.toggleFav=this.toggleFav.bind(this);\n       this.renderFavs=this.renderFavs.bind(this);\n       this.clear=this.clear.bind(this);\n     }\n\n\n  componentDidMount(){\n    let Items =[];\n      const url = \"https://secure.toronto.ca/cc_sr_v1/data/swm_waste_wizard_APR?limit=1000\";\n      //fetching data using the fetch method\n      fetch(url).then((obj) =>  obj.json()) //returns a json file\n        .then(OBJ => OBJ.map( item =>{\n            Items.push({\n              body : item.body,\n              category : item.category,\n              title: item.title,\n              keywords : item.keywords,\n              favorite: false,\n              id: this.state.count+1\n            })\n            this.setState({\n              items: Items,\n              isLoaded : true,\n              count: this.state.count+1\n            })\n          })\n        )\n        .catch(function(err){ //In case of an error\n\n          alert(err);\n\n        });\n  }\n\ntoggleFav(item){\n  let Items = [];\n  let favs = this.state.favs;\n   this.state.items.map(i => {\n    if(i === item ){\n      if(item.favorite){\n        item.favorite = false\n        favs--;\n      }\n      else{\n        item.favorite = true\n        favs++;\n      }\n    }\n    Items.push(i);\n  });\n  this.setState({\n    items: Items,\n    favs : favs\n  })\n}\n\nclear(e){\n  if(e===\"\")\n    this.setState({\n       filteredItems : []\n     })\n}\n\nChange (e){\n  let filteredItems = [];\n     let Items = this.state.items;\n     let query = e;\n      Items.filter(item=>{\n       let Keys = item.keywords.split(\" \");\n       Keys = Keys.join();\n       Keys = Keys.replace(/[^a-z0-9]/gi,'');\n       query = query.replace(/[^a-z0-9]/gi,'');\n         if(Keys.includes(query.toLowerCase()) && query !== \"\" && !filteredItems.includes(item)){\n          filteredItems.push(item);\n        }\n     })\n     if(filteredItems ===  undefined || filteredItems.length === 0 && query !== \"\")\n      alert(\"No match found. Try searching for keywords like takeout,plastic,water etc\")\n    if(query === \"\")\n      alert(\"Please enter a value\");\n     this.setState({\n       filteredItems : filteredItems\n     })\n}\n\n renderFavs (){\n   if(this.state.favs > 0){\n     let favItems = []\n     this.state.items.map(item=>{\n       if(item.favorite)\n         favItems.push(item);\n     })\n     return(\n       <div className=\"Favorites\">\n        <h1 style={{color: \"green\"}}> Favorites</h1>\n        {favItems.map((item,index) => (\n          <Display item={item}\n                   toggleFav={this.toggleFav}\n                   />\n        ))}\n       </div>\n     )\n   }\n }\n\n  render() {\n    let Items = this.state.filteredItems;\n    return(\n      <div className =\"App\">\n        <h1 className=\"header\"> Toronto Waste Lookup </h1>\n        <SearchField placeholder=\"Search...\" searchText=\"\"\n         classNames=\"searchBar\" onChange ={this.clear}onEnter={this.Change} onSearchClick ={this.Change} />\n           {Items.map((item,index) => (\n             <Display item={item}\n                      toggleFav={this.toggleFav}\n                      />\n           ))}\n           {this.renderFavs()}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}